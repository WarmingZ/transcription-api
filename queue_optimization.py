#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –≤–∏—Å–æ–∫–æ–≥–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
"""

import asyncio
import logging
from typing import Dict, Any
from dataclasses import dataclass
from enum import Enum
import time

class RequestPriority(Enum):
    LOW = 1
    NORMAL = 2
    HIGH = 3
    URGENT = 4

@dataclass
class TranscriptionTask:
    task_id: str
    user_id: str
    priority: RequestPriority
    created_at: float
    file_path: str
    language: str
    callback_url: str = None

class TranscriptionQueue:
    """–ß–µ—Ä–≥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
    
    def __init__(self, max_concurrent: int = 3):
        self.max_concurrent = max_concurrent
        self.queue = []
        self.running_tasks = {}
        self.completed_tasks = {}
        self.logger = logging.getLogger(__name__)
    
    async def add_task(self, task: TranscriptionTask) -> str:
        """–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ —á–µ—Ä–≥—É"""
        # –í—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
        inserted = False
        for i, existing_task in enumerate(self.queue):
            if task.priority.value > existing_task.priority.value:
                self.queue.insert(i, task)
                inserted = True
                break
        
        if not inserted:
            self.queue.append(task)
        
        self.logger.info(f"–î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è {task.task_id} –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º {task.priority.name}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É —è–∫—â–æ —î –≤—ñ–ª—å–Ω—ñ —Å–ª–æ—Ç–∏
        await self._process_queue()
        
        return task.task_id
    
    async def _process_queue(self):
        """–û–±—Ä–æ–±–∫–∞ —á–µ—Ä–≥–∏"""
        while len(self.running_tasks) < self.max_concurrent and self.queue:
            task = self.queue.pop(0)
            asyncio.create_task(self._process_task(task))
    
    async def _process_task(self, task: TranscriptionTask):
        """–û–±—Ä–æ–±–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        task_id = task.task_id
        self.running_tasks[task_id] = task
        
        try:
            self.logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è {task_id}")
            
            # –¢—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
            # result = await transcription_service.transcribe_simple(...)
            
            # –°–∏–º—É–ª—è—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏
            await asyncio.sleep(2)
            
            self.completed_tasks[task_id] = {
                'status': 'completed',
                'result': {'text': '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó'},
                'completed_at': time.time()
            }
            
            self.logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            self.completed_tasks[task_id] = {
                'status': 'error',
                'error': str(e),
                'completed_at': time.time()
            }
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∑–∞–≤–¥–∞–Ω–Ω—ñ {task_id}: {e}")
        
        finally:
            del self.running_tasks[task_id]
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É —á–µ—Ä–≥–∏
            await self._process_queue()
    
    def get_status(self, task_id: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è"""
        if task_id in self.running_tasks:
            return {'status': 'running', 'position': 0}
        elif task_id in self.completed_tasks:
            return self.completed_tasks[task_id]
        else:
            # –®—É–∫–∞—î–º–æ –≤ —á–µ—Ä–∑—ñ
            for i, task in enumerate(self.queue):
                if task.task_id == task_id:
                    return {'status': 'queued', 'position': i + 1}
            return {'status': 'not_found'}

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ FastAPI
class QueueOptimizedTranscriptionService:
    """–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –∑ —á–µ—Ä–≥–æ—é"""
    
    def __init__(self):
        self.queue = TranscriptionQueue(max_concurrent=3)
        self.logger = logging.getLogger(__name__)
    
    async def submit_transcription(self, user_id: str, file_path: str, 
                                 language: str = "uk", priority: RequestPriority = RequestPriority.NORMAL) -> str:
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é"""
        task_id = f"task_{int(time.time() * 1000)}"
        
        task = TranscriptionTask(
            task_id=task_id,
            user_id=user_id,
            priority=priority,
            created_at=time.time(),
            file_path=file_path,
            language=language
        )
        
        await self.queue.add_task(task)
        return task_id
    
    async def get_transcription_status(self, task_id: str) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó"""
        return self.queue.get_status(task_id)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤
PRODUCTION_CONFIG = {
    "max_concurrent": 3,  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
    "queue_timeout": 300,  # 5 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
    "priority_boost": {  # –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É –¥–ª—è VIP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        "vip_user": RequestPriority.HIGH,
        "premium_user": RequestPriority.NORMAL,
        "free_user": RequestPriority.LOW
    }
}

DEVELOPMENT_CONFIG = {
    "max_concurrent": 1,  # –¢—ñ–ª—å–∫–∏ 1 –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    "queue_timeout": 60,
    "priority_boost": {}
}

if __name__ == "__main__":
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ —á–µ—Ä–≥–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó")
    print("=" * 50)
    print("‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤")
    print("‚úÖ –û–±–º–µ–∂–µ–Ω–Ω—è –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å")
    print("‚úÖ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É")
    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è")

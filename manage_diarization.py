#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ä–µ—Å—É—Ä—Å—ñ–≤ —Å–µ—Ä–≤–µ—Ä–∞
"""

import os
import sys
from pathlib import Path

def check_diarization_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—ó"""
    print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–ê–ù–£ –î–Ü–ê–†–ò–ó–ê–¶–Ü–á")
    print("=" * 50)
    
    # –ß–∏—Ç–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
    config_path = Path("models/config.py")
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    with open(config_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if "ENABLE_DIARIZATION = True" in content:
        print("‚úÖ –î—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –£–í–Ü–ú–ö–ù–ï–ù–ê")
    elif "ENABLE_DIARIZATION = False" in content:
        print("‚ùå –î—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –í–ò–ú–ö–ù–ï–ù–ê")
    else:
        print("‚ö†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å worker –ø—Ä–æ—Ü–µ—Å—ñ–≤
    if "DIARIZATION_MAX_WORKERS = 2" in content:
        print("üîß –ú–∞–∫—Å–∏–º—É–º 2 worker –ø—Ä–æ—Ü–µ—Å–∏ –¥–ª—è –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—ó")
    elif "DIARIZATION_MAX_WORKERS = 1" in content:
        print("üîß –ú–∞–∫—Å–∏–º—É–º 1 worker –ø—Ä–æ—Ü–µ—Å –¥–ª—è –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—ó")
    else:
        print("‚ö†Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è worker –ø—Ä–æ—Ü–µ—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    print()

def disable_diarization():
    """–í—ñ–¥–∫–ª—é—á–∞—î –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó —Ä–µ—Å—É—Ä—Å—ñ–≤"""
    print("üîß –í–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–Ü–ê–†–ò–ó–ê–¶–Ü–á")
    print("=" * 50)
    
    config_path = Path("models/config.py")
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–º—ñ—Å—Ç
    with open(config_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if "ENABLE_DIARIZATION = True" in content:
        content = content.replace("ENABLE_DIARIZATION = True", "ENABLE_DIARIZATION = False")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        with open(config_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ –î—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞")
        print("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω")
    else:
        print("‚ö†Ô∏è –î—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –≤–∂–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    print()

def enable_diarization():
    """–í–∫–ª—é—á–∞—î –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é"""
    print("üîß –í–ö–õ–Æ–ß–ï–ù–ù–Ø –î–Ü–ê–†–ò–ó–ê–¶–Ü–á")
    print("=" * 50)
    
    config_path = Path("models/config.py")
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–º—ñ—Å—Ç
    with open(config_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if "ENABLE_DIARIZATION = False" in content:
        content = content.replace("ENABLE_DIARIZATION = False", "ENABLE_DIARIZATION = True")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        with open(config_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ –î—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –≤–∫–ª—é—á–µ–Ω–∞")
        print("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω")
    else:
        print("‚ö†Ô∏è –î—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –≤–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –∞–±–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    print()

def optimize_diarization():
    """–û–ø—Ç–∏–º—ñ–∑—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ 8GB RAM + 4 CPU AMD"""
    print("üöÄ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø –î–Ü–ê–†–ò–ó–ê–¶–Ü–á")
    print("=" * 50)
    
    config_path = Path("models/config.py")
    if not config_path.exists():
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –≤–º—ñ—Å—Ç
    with open(config_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    optimizations = [
        ("DIARIZATION_MAX_WORKERS = 2", "DIARIZATION_MAX_WORKERS = 1"),  # –ú–µ–Ω—à–µ –ø—Ä–æ—Ü–µ—Å—ñ–≤
    ]
    
    changes_made = False
    for old, new in optimizations:
        if old in content:
            content = content.replace(old, new)
            changes_made = True
            print(f"‚úÖ {old} ‚Üí {new}")
    
    if changes_made:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        with open(config_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("\nüí° –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        print("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω")
    else:
        print("‚ö†Ô∏è –ù–µ–º–∞—î –∑–º—ñ–Ω –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó")
    
    print()

def show_diarization_info():
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é"""
    print("üìã –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –î–Ü–ê–†–ò–ó–ê–¶–Ü–Æ")
    print("=" * 50)
    
    print("üéØ –©–æ —Ç–∞–∫–µ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è:")
    print("   ‚Ä¢ –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –∞—É–¥—ñ–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∏ –∑–∞ –¥–∏–∫—Ç–æ—Ä–∞–º–∏")
    print("   ‚Ä¢ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª–µ–π '–û–ø–µ—Ä–∞—Ç–æ—Ä' —Ç–∞ '–ö–ª—ñ—î–Ω—Ç'")
    print("   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î WebRTC VAD –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –º–æ–≤–ª–µ–Ω–Ω—è")
    
    print("\n‚ö° –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä:")
    print("   ‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è RAM –¥–ª—è VAD")
    print("   ‚Ä¢ –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤")
    print("   ‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø—Ä–æ—Ü–µ—Å–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∞—É–¥—ñ–æ")
    
    print("\nüîß –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:")
    print("   ‚Ä¢ Lazy loading - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ")
    print("   ‚Ä¢ –û–±–º–µ–∂–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å worker –ø—Ä–æ—Ü–µ—Å—ñ–≤")
    print("   ‚Ä¢ –ó–º–µ–Ω—à–µ–Ω–∞ –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ—Å—Ç—å VAD")
    print("   ‚Ä¢ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–≤–Ω–æ–≥–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
    
    print("\nüìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ 8GB RAM + 4 CPU AMD:")
    print("   ‚Ä¢ –î—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –≤–∫–ª—é—á–µ–Ω–∞: 1-2 worker –ø—Ä–æ—Ü–µ—Å–∏")
    print("   ‚Ä¢ –î—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞: –µ–∫–æ–Ω–æ–º—ñ—è ~500MB RAM")
    print("   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ")
    
    print()

def show_usage_stats():
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—ó"""
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ª–æ–≥–∏
    log_files = list(Path(".").glob("*.log"))
    if log_files:
        print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(log_files)} –ª–æ–≥ —Ñ–∞–π–ª—ñ–≤")
        for log_file in log_files[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 3
            print(f"   ‚Ä¢ {log_file.name}")
    else:
        print("üìÅ –õ–æ–≥ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    print("\nüí° –î–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
    print("   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    print("   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ htop –∞–±–æ top –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É CPU/RAM")
    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä –∑ --log-level debug")
    
    print()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üîß –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –î–Ü–ê–†–ò–ó–ê–¶–Ü–Ñ–Æ")
    print("=" * 60)
    print("–°–µ—Ä–≤–µ—Ä: 8GB RAM + 4 CPU AMD")
    print("=" * 60)
    
    while True:
        print("\nüìã –í–ò–ë–ï–†–Ü–¢–¨ –î–Ü–Æ:")
        print("1. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—ó")
        print("2. –í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é (–µ–∫–æ–Ω–æ–º—ñ—è —Ä–µ—Å—É—Ä—Å—ñ–≤)")
        print("3. –í–∫–ª—é—á–∏—Ç–∏ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é")
        print("4. –û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        print("5. –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é")
        print("6. –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
        print("7. –í–∏—Ö—ñ–¥")
        
        choice = input("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä (1-7): ").strip()
        
        if choice == "1":
            check_diarization_status()
        elif choice == "2":
            disable_diarization()
        elif choice == "3":
            enable_diarization()
        elif choice == "4":
            optimize_diarization()
        elif choice == "5":
            show_diarization_info()
        elif choice == "6":
            show_usage_stats()
        elif choice == "7":
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

if __name__ == "__main__":
    main()

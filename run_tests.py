#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
"""

import sys
import os
import unittest
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É Python
sys.path.insert(0, str(Path(__file__).parent))

def run_tests():
    """–ó–∞–ø—É—Å–∫–∞—î –≤—Å—ñ —Ç–µ—Å—Ç–∏"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–Ü–í –°–ò–°–¢–ï–ú–ò –¢–†–ê–ù–°–ö–†–ò–ü–¶–Ü–á")
    print("=" * 50)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ—Å—Ç–∏
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromName('test_transcription')
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ù–µ–≤–¥–∞–ª–∏—Ö —Ç–µ—Å—Ç—ñ–≤: {len(result.failures)}")
    print(f"üí• –ü–æ–º–∏–ª–æ–∫: {len(result.errors)}")
    print(f"üìà –ó–∞–≥–∞–ª–æ–º —Ç–µ—Å—Ç—ñ–≤: {result.testsRun}")
    
    if result.failures:
        print("\n‚ùå –ù–ï–í–î–ê–õ–Ü –¢–ï–°–¢–ò:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback}")
    
    if result.errors:
        print("\nüí• –ü–û–ú–ò–õ–ö–ò:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback}")
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–¥ –≤–∏—Ö–æ–¥—É
    return 0 if result.wasSuccessful() else 1

if __name__ == '__main__':
    exit_code = run_tests()
    sys.exit(exit_code)

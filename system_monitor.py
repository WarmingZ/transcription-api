#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—ó
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å—ñ–≤
"""

import psutil
import time
import logging
import os
import signal
import sys
from datetime import datetime, timedelta
from typing import Dict, Any

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('system_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SystemMonitor:
    """–°–∏—Å—Ç–µ–º–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –æ—á–∏—â–µ–Ω–Ω—è–º"""
    
    def __init__(self):
        self.memory_threshold = 80.0  # –ü–æ—Ä—ñ–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è RAM
        self.cpu_threshold = 90.0     # –ü–æ—Ä—ñ–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CPU
        self.disk_threshold = 90.0    # –ü–æ—Ä—ñ–≥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫—É
        self.monitoring_interval = 60  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (—Å–µ–∫—É–Ω–¥–∏)
        self.cleanup_interval = 300    # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—â–µ–Ω–Ω—è (—Å–µ–∫—É–Ω–¥–∏)
        self.running = True
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'memory_warnings': 0,
            'cpu_warnings': 0,
            'disk_warnings': 0,
            'cleanups_performed': 0,
            'start_time': datetime.now()
        }
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"""
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É...")
        self.running = False
    
    def get_system_info(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            cpu_freq = psutil.cpu_freq()
            
            # –ü–∞–º'—è—Ç—å
            memory = psutil.virtual_memory()
            memory_gb = memory.total / (1024**3)
            memory_used_gb = memory.used / (1024**3)
            memory_available_gb = memory.available / (1024**3)
            memory_percent = memory.percent
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            disk_gb = disk.total / (1024**3)
            disk_used_gb = disk.used / (1024**3)
            disk_free_gb = disk.free / (1024**3)
            disk_percent = (disk.used / disk.total) * 100
            
            # –ü—Ä–æ—Ü–µ—Å–∏
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                try:
                    if proc.info['memory_percent'] > 1.0:  # –ü—Ä–æ—Ü–µ—Å–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å >1% RAM
                        processes.append(proc.info)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            
            # –°–æ—Ä—Ç—É—î–º–æ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –ø–∞–º'—è—Ç—ñ
            processes.sort(key=lambda x: x['memory_percent'], reverse=True)
            
            return {
                'timestamp': datetime.now().isoformat(),
                'cpu': {
                    'percent': cpu_percent,
                    'count': cpu_count,
                    'frequency': cpu_freq.current if cpu_freq else None
                },
                'memory': {
                    'total_gb': memory_gb,
                    'used_gb': memory_used_gb,
                    'available_gb': memory_available_gb,
                    'percent': memory_percent
                },
                'disk': {
                    'total_gb': disk_gb,
                    'used_gb': disk_used_gb,
                    'free_gb': disk_free_gb,
                    'percent': disk_percent
                },
                'top_processes': processes[:10]  # –¢–æ–ø 10 –ø—Ä–æ—Ü–µ—Å—ñ–≤
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É: {e}")
            return {}
    
    def log_system_status(self):
        """–õ–æ–≥—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏"""
        info = self.get_system_info()
        if not info:
            return
        
        cpu = info['cpu']
        memory = info['memory']
        disk = info['disk']
        
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        logger.info(
            f"üìä –°–∏—Å—Ç–µ–º–∞: CPU {cpu['percent']:.1f}%/{cpu['count']} —è–¥–µ—Ä, "
            f"RAM {memory['used_gb']:.1f}/{memory['total_gb']:.1f}GB ({memory['percent']:.1f}%), "
            f"–î–∏—Å–∫ {disk['used_gb']:.1f}/{disk['total_gb']:.1f}GB ({disk['percent']:.1f}%)"
        )
        
        # –¢–æ–ø –ø—Ä–æ—Ü–µ—Å–∏
        if info['top_processes']:
            logger.info("üîù –¢–æ–ø –ø—Ä–æ—Ü–µ—Å–∏ –ø–æ RAM:")
            for proc in info['top_processes'][:5]:
                logger.info(f"  {proc['name']} (PID {proc['pid']}): {proc['memory_percent']:.1f}% RAM")
        
        # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        warnings = []
        
        if memory['percent'] > self.memory_threshold:
            warnings.append(f"‚ö†Ô∏è –í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è RAM: {memory['percent']:.1f}%")
            self.stats['memory_warnings'] += 1
        
        if cpu['percent'] > self.cpu_threshold:
            warnings.append(f"‚ö†Ô∏è –í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CPU: {cpu['percent']:.1f}%")
            self.stats['cpu_warnings'] += 1
        
        if disk['percent'] > self.disk_threshold:
            warnings.append(f"‚ö†Ô∏è –í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫—É: {disk['percent']:.1f}%")
            self.stats['disk_warnings'] += 1
        
        if warnings:
            for warning in warnings:
                logger.warning(warning)
    
    def cleanup_system(self):
        """–í–∏–∫–æ–Ω—É—î –æ—á–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"""
        try:
            logger.info("üßπ –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏...")
            
            # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            temp_dirs = ['/tmp', '/var/tmp', 'temp']
            cleaned_files = 0
            
            for temp_dir in temp_dirs:
                if os.path.exists(temp_dir):
                    try:
                        for root, dirs, files in os.walk(temp_dir):
                            for file in files:
                                file_path = os.path.join(root, file)
                                try:
                                    # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª–∏ —Å—Ç–∞—Ä—à—ñ 1 –≥–æ–¥–∏–Ω–∏
                                    if os.path.getmtime(file_path) < time.time() - 3600:
                                        os.unlink(file_path)
                                        cleaned_files += 1
                                except (OSError, PermissionError):
                                    pass
                    except (OSError, PermissionError):
                        pass
            
            # –û—á–∏—â–µ–Ω–Ω—è Python –∫–µ—à—É
            import gc
            collected = gc.collect()
            
            # –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ (—è–∫—â–æ –≤–æ–Ω–∏ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫—ñ)
            log_files = ['system_monitor.log', 'app.log']
            for log_file in log_files:
                if os.path.exists(log_file):
                    try:
                        file_size = os.path.getsize(log_file)
                        if file_size > 100 * 1024 * 1024:  # 100MB
                            # –û–±—Ä—ñ–∑–∞—î–º–æ –ª–æ–≥ —Ñ–∞–π–ª
                            with open(log_file, 'w') as f:
                                f.write(f"# –õ–æ–≥ —Ñ–∞–π–ª –æ–±—Ä—ñ–∑–∞–Ω–æ {datetime.now()}\n")
                            logger.info(f"üìù –û–±—Ä—ñ–∑–∞–Ω–æ –ª–æ–≥ —Ñ–∞–π–ª {log_file}")
                    except (OSError, PermissionError):
                        pass
            
            logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {cleaned_files} —Ñ–∞–π–ª—ñ–≤, {collected} –æ–±'—î–∫—Ç—ñ–≤ GC")
            self.stats['cleanups_performed'] += 1
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏: {e}")
    
    def check_and_cleanup(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –≤–∏–∫–æ–Ω—É—î –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ"""
        info = self.get_system_info()
        if not info:
            return
        
        memory = info['memory']
        cpu = info['cpu']
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Å–æ–∫–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ —Ä–µ—Å—É—Ä—Å—ñ–≤
        should_cleanup = False
        
        if memory['percent'] > self.memory_threshold:
            logger.warning(f"üö® –ö—Ä–∏—Ç–∏—á–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è RAM: {memory['percent']:.1f}%")
            should_cleanup = True
        
        if cpu['percent'] > self.cpu_threshold:
            logger.warning(f"üö® –ö—Ä–∏—Ç–∏—á–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CPU: {cpu['percent']:.1f}%")
            should_cleanup = True
        
        if should_cleanup:
            self.cleanup_system()
    
    def print_stats(self):
        """–í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–±–æ—Ç–∏"""
        uptime = datetime.now() - self.stats['start_time']
        
        logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:")
        logger.info(f"  –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime}")
        logger.info(f"  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å RAM: {self.stats['memory_warnings']}")
        logger.info(f"  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å CPU: {self.stats['cpu_warnings']}")
        logger.info(f"  –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –¥–∏—Å–∫—É: {self.stats['disk_warnings']}")
        logger.info(f"  –û—á–∏—â–µ–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ: {self.stats['cleanups_performed']}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞...")
        logger.info(f"–ü–æ—Ä–æ–≥–∏: RAM {self.memory_threshold}%, CPU {self.cpu_threshold}%, –î–∏—Å–∫ {self.disk_threshold}%")
        
        last_cleanup = time.time()
        
        try:
            while self.running:
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏
                self.log_system_status()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è
                self.check_and_cleanup()
                
                # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è
                if time.time() - last_cleanup > self.cleanup_interval:
                    self.cleanup_system()
                    last_cleanup = time.time()
                
                # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è
                time.sleep(self.monitoring_interval)
                
        except KeyboardInterrupt:
            logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {e}")
        finally:
            self.print_stats()
            logger.info("üëã –°–∏—Å—Ç–µ–º–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if len(sys.argv) > 1:
        if sys.argv[1] == "--help":
            print("""
–°–∏—Å—Ç–µ–º–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—ó

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  python system_monitor.py              # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
  python system_monitor.py --help      # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

–§—É–Ω–∫—Ü—ñ—ó:
  - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ CPU, RAM, –¥–∏—Å–∫—É
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Å–æ–∫–æ–º—É –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  - –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—ñ–≤
  - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏

–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ –∫–æ–¥—ñ:
  - memory_threshold: 80% (–ø–æ—Ä—ñ–≥ RAM)
  - cpu_threshold: 90% (–ø–æ—Ä—ñ–≥ CPU)
  - monitoring_interval: 60s (—ñ–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É)
  - cleanup_interval: 300s (—ñ–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—â–µ–Ω–Ω—è)
            """)
            return
    
    monitor = SystemMonitor()
    monitor.run()

if __name__ == "__main__":
    main()

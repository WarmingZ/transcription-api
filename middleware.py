"""
Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è
"""

from fastapi import HTTPException, Request, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import JSONResponse
import logging
from typing import Optional
from auth import get_api_key_manager

logger = logging.getLogger(__name__)

class APIKeyAuth(HTTPBearer):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ API –∫–ª—é—á"""
    
    def __init__(self, auto_error: bool = True):
        super(APIKeyAuth, self).__init__(auto_error=auto_error)
        self.api_key_manager = get_api_key_manager()
    
    async def __call__(self, request: Request) -> Optional[str]:
        credentials: HTTPAuthorizationCredentials = await super(APIKeyAuth, self).__call__(request)
        
        if credentials:
            if not self.verify_api_key(credentials.credentials):
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="–ù–µ–¥—ñ–π—Å–Ω–∏–π API –∫–ª—é—á",
                    headers={"WWW-Authenticate": "Bearer"},
                )
            return credentials.credentials
        else:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="API –∫–ª—é—á –Ω–µ –Ω–∞–¥–∞–Ω–æ",
                headers={"WWW-Authenticate": "Bearer"},
            )
    
    def verify_api_key(self, api_key: str, update_stats: bool = True) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î API –∫–ª—é—á"""
        return self.api_key_manager.validate_api_key(api_key, update_stats)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
api_key_auth = APIKeyAuth()

class AdminAPIKeyAuth(APIKeyAuth):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è –∞–¥–º—ñ–Ω –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤ (–±–µ–∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)"""
    
    def verify_api_key(self, api_key: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î API –∫–ª—é—á –±–µ–∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return self.api_key_manager.validate_api_key(api_key, update_stats=False)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
admin_api_key_auth = AdminAPIKeyAuth()

class LoggingMiddleware:
    """Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤"""
    
    def __init__(self, app):
        self.app = app
    
    async def __call__(self, scope, receive, send):
        if scope["type"] == "http":
            request = Request(scope, receive)
            
            # –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç
            logger.info(f"üì• {request.method} {request.url.path} - {request.client.host}")
            
            # –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç–∏ –¥–æ –∑–∞—Ö–∏—â–µ–Ω–∏—Ö –µ–Ω–¥–ø–æ—ñ–Ω—Ç—ñ–≤
            if request.url.path.startswith("/transcribe") or request.url.path.startswith("/api-keys"):
                auth_header = request.headers.get("Authorization")
                if auth_header and auth_header.startswith("Bearer "):
                    api_key = auth_header.split(" ")[1]
                    key_info = api_key_auth.api_key_manager.get_key_info(api_key)
                    if key_info:
                        logger.info(f"üîê –ó–∞–ø–∏—Ç –¥–æ {request.url.path} –≤—ñ–¥ {key_info['name']}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–¥—ñ–π—Å–Ω–∏–π API –∫–ª—é—á –¥–ª—è {request.url.path}")
                else:
                    logger.warning(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è {request.url.path}")
        
        await self.app(scope, receive, send)


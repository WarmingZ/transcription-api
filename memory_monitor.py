"""
–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º'—è—Ç—ñ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—ñ—ó
"""

import psutil
import logging
import time
from typing import Dict, Any
from contextlib import contextmanager

logger = logging.getLogger(__name__)

class MemoryMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é"""
    
    def __init__(self, max_memory_percent: float = 80.0):
        self.max_memory_percent = max_memory_percent
        self.process = psutil.Process()
        self.start_memory = self.get_memory_usage()
        
    def get_memory_usage(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω–∞ –ø–∞–º'—è—Ç—å
            system_memory = psutil.virtual_memory()
            
            # –ü–∞–º'—è—Ç—å –ø—Ä–æ—Ü–µ—Å—É
            process_memory = self.process.memory_info()
            
            return {
                'system_total_gb': system_memory.total / (1024**3),
                'system_available_gb': system_memory.available / (1024**3),
                'system_used_percent': system_memory.percent,
                'process_rss_mb': process_memory.rss / (1024**2),
                'process_vms_mb': process_memory.vms / (1024**2),
                'timestamp': time.time()
            }
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–∞–º'—è—Ç—å: {e}")
            return {}
    
    def log_memory_status(self, context: str = ""):
        """–õ–æ–≥—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–∞–º'—è—Ç—ñ"""
        memory_info = self.get_memory_usage()
        if memory_info:
            logger.info(f"üß† –ü–∞–º'—è—Ç—å {context}: "
                       f"–°–∏—Å—Ç–µ–º–∞ {memory_info['system_used_percent']:.1f}% "
                       f"({memory_info['system_available_gb']:.1f}GB –≤—ñ–ª—å–Ω–∏—Ö), "
                       f"–ü—Ä–æ—Ü–µ—Å {memory_info['process_rss_mb']:.1f}MB")
    
    def check_memory_pressure(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î —Ç–∏—Å–∫ –Ω–∞ –ø–∞–º'—è—Ç—å"""
        memory_info = self.get_memory_usage()
        if memory_info:
            return memory_info['system_used_percent'] > self.max_memory_percent
        return False
    
    def force_garbage_collection(self):
        """–ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ"""
        import gc
        collected = gc.collect()
        logger.info(f"üóëÔ∏è Garbage collection: –æ—á–∏—â–µ–Ω–æ {collected} –æ–±'—î–∫—Ç—ñ–≤")
    
    @contextmanager
    def memory_context(self, context_name: str):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–∞–º'—è—Ç—ñ"""
        self.log_memory_status(f"–¥–æ {context_name}")
        start_memory = self.get_memory_usage()
        
        try:
            yield self
        finally:
            end_memory = self.get_memory_usage()
            if start_memory and end_memory:
                memory_diff = end_memory['process_rss_mb'] - start_memory['process_rss_mb']
                logger.info(f"üß† –ü–∞–º'—è—Ç—å –ø—ñ—Å–ª—è {context_name}: "
                           f"{memory_diff:+.1f}MB –∑–º—ñ–Ω–∞")
            
            # –ü—Ä–∏–º—É—Å–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if self.check_memory_pressure():
                self.force_garbage_collection()

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –ø–∞–º'—è—Ç—ñ
memory_monitor = MemoryMonitor()

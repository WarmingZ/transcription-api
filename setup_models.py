#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
"""
import os
import sys
import logging
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def download_whisper_model(model_size="small"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è faster-whisper –º–æ–¥–µ–ª—ñ –≤ –ª–æ–∫–∞–ª—å–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –ø—Ä–æ–µ–∫—Ç—É"""
    try:
        from faster_whisper import WhisperModel
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç—ñ
        models_dir = Path("models")
        models_dir.mkdir(exist_ok=True)
        
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è faster-whisper {model_size} –º–æ–¥–µ–ª—ñ –≤ {models_dir}...")
        model = WhisperModel(
            model_size, 
            device="cpu", 
            compute_type="int8",
            download_root=str(models_dir)  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
        )
        logger.info(f"‚úÖ faster-whisper {model_size} –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ –≤ {models_dir}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è faster-whisper {model_size}: {e}")
        return False

def download_all_whisper_models():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö Whisper –º–æ–¥–µ–ª–µ–π"""
    models = ["small", "medium"]
    results = {}
    
    for model_size in models:
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {model_size} –º–æ–¥–µ–ª—ñ...")
        results[model_size] = download_whisper_model(model_size)
    
    return results

def download_speechbrain_model():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SpeechBrain –º–æ–¥–µ–ª—ñ"""
    try:
        from speechbrain.pretrained import EncoderClassifier
        logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SpeechBrain –º–æ–¥–µ–ª—ñ...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –º–æ–¥–µ–ª–µ–π
        models_dir = Path("pretrained_models")
        models_dir.mkdir(exist_ok=True)
        
        model = EncoderClassifier.from_hparams(
            source="speechbrain/spkrec-ecapa-voxceleb",
            savedir=str(models_dir / "spkrec-ecapa-voxceleb"),
            run_opts={"device": "cpu"}  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CPU –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        )
        logger.info("‚úÖ SpeechBrain –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è SpeechBrain: {e}")
        return False

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    required_packages = [
        "torch",
        "torchaudio", 
        "faster_whisper",
        "speechbrain",
        "librosa",
        "scikit-learn",
        "numpy",
        "scipy"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            logger.info(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            logger.error(f"‚ùå {package}")
    
    if missing_packages:
        logger.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: {', '.join(missing_packages)}")
        logger.error("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–æ—é: pip install -r requirements.txt")
        return False
    
    logger.info("‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
    return True

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π")
    logger.info("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if not check_dependencies():
        sys.exit(1)
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
    logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è faster-whisper –º–æ–¥–µ–ª–µ–π (small —Ç–∞ medium)...")
    whisper_results = download_all_whisper_models()
    speechbrain_ok = download_speechbrain_model()
    
    logger.info("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    whisper_ok = any(whisper_results.values())  # –•–æ—á–∞ –± –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∞—Å—å
    
    if whisper_ok and speechbrain_ok:
        logger.info("üéâ –í—Å—ñ –º–æ–¥–µ–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        logger.info("–î–æ—Å—Ç—É–ø–Ω—ñ faster-whisper –º–æ–¥–µ–ª—ñ:")
        for model, success in whisper_results.items():
            status = "‚úÖ" if success else "‚ùå"
            logger.info(f"  {status} {model}")
        logger.info("üöÄ faster-whisper –ø—Ä–∞—Ü—é—î –≤ 4-10 —Ä–∞–∑—ñ–≤ —à–≤–∏–¥—à–µ –Ω—ñ–∂ OpenAI Whisper!")
        logger.info(f"üìÅ –ú–æ–¥–µ–ª—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {Path('models').absolute()}")
        logger.info("–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ API: python main.py")
    else:
        logger.error("‚ö†Ô∏è –î–µ—è–∫—ñ –º–æ–¥–µ–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å")
        if not whisper_ok:
            logger.error("- –ñ–æ–¥–Ω–∞ faster-whisper –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        if not speechbrain_ok:
            logger.error("- SpeechBrain –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        sys.exit(1)

if __name__ == "__main__":
    main()

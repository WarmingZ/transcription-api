from fastapi import FastAPI, File, UploadFile, HTTPException, Form
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, HttpUrl
import tempfile
import os
import httpx
from typing import Optional, List, Dict, Any
import logging
from models import LocalTranscriptionService

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Ukrainian Audio Transcription API (Local Models)",
    description="API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –¥–∏–∫—Ç–æ—Ä—ñ–≤ (–ª–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ)",
    version="1.0.0"
)

# –î–æ–¥–∞—î–º–æ CORS middleware –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
transcription_service = None



class TranscriptionRequest(BaseModel):
    url: Optional[HttpUrl] = None
    language: str = "uk"  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    model_size: str = "small"  # –†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ Whisper
    enhance_audio: bool = True  # –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ
    use_diarization: bool = False  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é

class TranscriptionResponse(BaseModel):
    text: str
    segments: List[Dict[str, Any]]
    speakers: Optional[List[Dict[str, Any]]] = None
    duration: float
    language: str
    diarization_type: Optional[str] = None

class ErrorResponse(BaseModel):
    error: str
    detail: Optional[str] = None

@app.on_event("startup")
async def load_models():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞"""
    global transcription_service
    
    try:
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó...")
        transcription_service = LocalTranscriptionService()
        
        if transcription_service.load_models():
            logger.info("–õ–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
        else:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—ñ")
            raise RuntimeError("–ú–æ–¥–µ–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π: {e}")
        raise RuntimeError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å: {e}")

async def download_file_from_url(url: str) -> str:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ URL"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(str(url))
            response.raise_for_status()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".tmp")
            temp_file.write(response.content)
            temp_file.close()
            
            return temp_file.name
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {str(e)}")

# –§—É–Ω–∫—Ü—ñ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å

@app.post("/transcribe", response_model=TranscriptionResponse)
async def transcribe_audio_file(
    file: Optional[UploadFile] = File(None),
    url: Optional[str] = Form(None),
    language: str = Form("uk"),
    model_size: str = Form("small"),
    use_diarization: bool = Form(False)
):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –¥–∏–∫—Ç–æ—Ä—ñ–≤
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - file: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª (–∞—É–¥—ñ–æ –∞–±–æ –≤—ñ–¥–µ–æ)
    - url: URL –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª
    - language: –ú–æ–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'uk' –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó)
    - model_size: –†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ Whisper (tiny, base, small, medium, large, auto)
    - use_diarization: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é –û–ø–µ—Ä–∞—Ç–æ—Ä/–ö–ª—ñ—î–Ω—Ç (True/False)
    """
    
    if not file and not url:
        raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ –∞–±–æ —Ñ–∞–π–ª, –∞–±–æ URL")
    
    if file and url:
        raise HTTPException(status_code=400, detail="–ù–∞–¥–∞–π—Ç–µ –∞–±–æ —Ñ–∞–π–ª, –∞–±–æ URL, –∞–ª–µ –Ω–µ –æ–±–∏–¥–≤–∞")
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—É –º–æ–¥–µ–ª—ñ
    if model_size not in ["tiny", "base", "small", "medium", "large", "auto"]:
        raise HTTPException(status_code=400, detail="–†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏: tiny, base, small, medium, large –∞–±–æ auto")
    
    temp_file_path = None
    
    try:
        # –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É –∞–±–æ URL
        if file:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=f".{file.filename.split('.')[-1]}")
            content = await file.read()
            temp_file.write(content)
            temp_file.close()
            temp_file_path = temp_file.name
            
        elif url:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ URL
            temp_file_path = await download_file_from_url(url)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑ –∞–±–æ –±–µ–∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—ó
        logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É: model_size={model_size}, language={language}, use_diarization={use_diarization}")
        if use_diarization:
            logger.info(f"–ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é —Ñ–∞–π–ª—É: {temp_file_path}")
            processed_result = transcription_service.transcribe_with_diarization(temp_file_path, language, model_size)
        else:
            logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Å—Ç–æ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó —Ñ–∞–π–ª—É: {temp_file_path}")
            processed_result = transcription_service.transcribe_simple(temp_file_path, language, model_size)
        
        logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        return TranscriptionResponse(**processed_result)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    
    finally:
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
                logger.info(f"–¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {temp_file_path}")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {e}")

@app.post("/transcribe-with-diarization", response_model=TranscriptionResponse)
async def transcribe_with_diarization(
    file: Optional[UploadFile] = File(None),
    url: Optional[str] = Form(None),
    language: str = Form("uk"),
    model_size: str = Form("small")
):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é –û–ø–µ—Ä–∞—Ç–æ—Ä/–ö–ª—ñ—î–Ω—Ç
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - file: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª (–∞—É–¥—ñ–æ –∞–±–æ –≤—ñ–¥–µ–æ)
    - url: URL –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª
    - language: –ú–æ–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'uk' –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó)
    - model_size: –†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ Whisper (tiny, base, small, medium, large, auto)
    """
    
    if not file and not url:
        raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ –∞–±–æ —Ñ–∞–π–ª, –∞–±–æ URL")
    
    if file and url:
        raise HTTPException(status_code=400, detail="–ù–∞–¥–∞–π—Ç–µ –∞–±–æ —Ñ–∞–π–ª, –∞–±–æ URL, –∞–ª–µ –Ω–µ –æ–±–∏–¥–≤–∞")
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—É –º–æ–¥–µ–ª—ñ
    if model_size not in ["tiny", "base", "small", "medium", "large", "auto"]:
        raise HTTPException(status_code=400, detail="–†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏: tiny, base, small, medium, large –∞–±–æ auto")
    
    temp_file_path = None
    
    try:
        # –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É –∞–±–æ URL
        if file:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=f".{file.filename.split('.')[-1]}")
            content = await file.read()
            temp_file.write(content)
            temp_file.close()
            temp_file_path = temp_file.name
            
        elif url:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ URL
            temp_file_path = await download_file_from_url(url)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é
        logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É: model_size={model_size}, language={language}")
        logger.info(f"–ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é —Ñ–∞–π–ª—É: {temp_file_path}")
        processed_result = transcription_service.transcribe_with_diarization(temp_file_path, language, model_size)
        
        logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        return TranscriptionResponse(**processed_result)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    
    finally:
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
                logger.info(f"–¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {temp_file_path}")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {e}")

@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—É"""
    return {
        "status": "healthy",
        "models_loaded": transcription_service is not None and transcription_service.models_loaded,
        "whisper_loaded": transcription_service is not None and transcription_service.whisper_model.model is not None
    }


@app.get("/api")
async def api_info():
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API"""
    return {
        "message": "Ukrainian Audio Transcription API (Local Models)",
        "version": "1.0.0",
        "description": "API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –¥–∏–∫—Ç–æ—Ä—ñ–≤ (–ª–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ)",
        "endpoints": {
            "transcribe": "/transcribe (POST, public)",
            "transcribe_with_diarization": "/transcribe-with-diarization (POST, public)",
            "health": "/health (GET, public)",
            "docs": "/docs (GET, public)",
            "api_info": "/api (GET, public)"
        },
        "features": [
            "–õ–æ–∫–∞–ª—å–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è (faster-whisper)",
            "–ü—Ä–æ—Å—Ç–∞ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –û–ø–µ—Ä–∞—Ç–æ—Ä/–ö–ª—ñ—î–Ω—Ç (WebRTC VAD)",
            "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ URL",
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞",
            "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è CPU —Ç–∞ GPU"
        ],
        "supported_formats": [
            "–ê—É–¥—ñ–æ: WAV, MP3, M4A, FLAC, OGG",
            "–í—ñ–¥–µ–æ: MP4, AVI, MOV, MKV"
        ],
        "model_sizes": ["tiny", "base", "small", "medium", "large", "auto"],
        "languages": ["uk", "en", "ru", "pl", "de", "fr", "es", "it"]
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

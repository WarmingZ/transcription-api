from fastapi import FastAPI, File, UploadFile, HTTPException, Form, Depends, Header, Request
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel, HttpUrl
import tempfile
import os
import httpx
import time
from typing import Optional, List, Dict, Any
import logging
from models import LocalTranscriptionService
from middleware import verify_api_key, verify_master_token, verify_master_token_from_query
from api_auth import api_key_manager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Ukrainian Audio Transcription API (Local Models)",
    description="API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –¥–∏–∫—Ç–æ—Ä—ñ–≤ (–ª–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ)",
    version="1.0.0"
)

# –î–æ–¥–∞—î–º–æ CORS middleware –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
transcription_service = None



class TranscriptionRequest(BaseModel):
    url: Optional[HttpUrl] = None
    language: str = "uk"  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    model_size: str = "small"  # –†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ Whisper
    enhance_audio: bool = True  # –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ
    use_diarization: bool = False  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é

class TranscriptionResponse(BaseModel):
    text: str
    segments: List[Dict[str, Any]]
    speakers: Optional[List[Dict[str, Any]]] = None
    duration: float
    language: str
    diarization_type: Optional[str] = None

class ErrorResponse(BaseModel):
    error: str
    detail: Optional[str] = None

class GenerateKeyRequest(BaseModel):
    client_name: str

class GenerateKeyResponse(BaseModel):
    api_key: str
    client_name: str
    created_at: str

class DeleteKeyRequest(BaseModel):
    api_key: str

class UpdateKeyNotesRequest(BaseModel):
    api_key: str
    notes: str

class ToggleKeyStatusRequest(BaseModel):
    api_key: str

class APIKeyInfo(BaseModel):
    key: str
    client_name: str
    created_at: str
    active: bool
    usage_count: int
    last_used: Optional[str]
    total_requests: int
    successful_requests: int
    failed_requests: int
    total_processing_time: float
    average_processing_time: float
    notes: str

@app.on_event("startup")
async def load_models():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞"""
    global transcription_service
    
    try:
        logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó...")
        transcription_service = LocalTranscriptionService()
        
        if transcription_service.load_models():
            logger.info("–õ–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
        else:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—ñ")
            raise RuntimeError("–ú–æ–¥–µ–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
        
        # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ master —Ç–æ–∫–µ–Ω
        api_key_manager.print_startup_info()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π: {e}")
        raise RuntimeError(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å: {e}")

async def download_file_from_url(url: str) -> str:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ URL"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(str(url))
            response.raise_for_status()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".tmp")
            temp_file.write(response.content)
            temp_file.close()
            
            return temp_file.name
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {str(e)}")

# –§—É–Ω–∫—Ü—ñ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å

@app.post("/transcribe", response_model=TranscriptionResponse)
async def transcribe_audio_file(
    file: Optional[UploadFile] = File(None),
    url: Optional[str] = Form(None),
    language: str = Form("uk"),
    model_size: str = Form("small"),
    use_diarization: bool = Form(False),
    api_key: str = Depends(verify_api_key)
):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –¥–∏–∫—Ç–æ—Ä—ñ–≤
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - file: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª (–∞—É–¥—ñ–æ –∞–±–æ –≤—ñ–¥–µ–æ)
    - url: URL –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª
    - language: –ú–æ–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'uk' –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó)
    - model_size: –†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ Whisper (tiny, base, small, medium, large, auto)
    - use_diarization: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—é –û–ø–µ—Ä–∞—Ç–æ—Ä/–ö–ª—ñ—î–Ω—Ç (True/False)
    """
    
    if not file and not url:
        raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ –∞–±–æ —Ñ–∞–π–ª, –∞–±–æ URL")
    
    if file and url:
        raise HTTPException(status_code=400, detail="–ù–∞–¥–∞–π—Ç–µ –∞–±–æ —Ñ–∞–π–ª, –∞–±–æ URL, –∞–ª–µ –Ω–µ –æ–±–∏–¥–≤–∞")
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—É –º–æ–¥–µ–ª—ñ
    if model_size not in ["tiny", "base", "small", "medium", "large", "auto"]:
        raise HTTPException(status_code=400, detail="–†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏: tiny, base, small, medium, large –∞–±–æ auto")
    
    temp_file_path = None
    
    try:
        # –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É –∞–±–æ URL
        if file:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=f".{file.filename.split('.')[-1]}")
            content = await file.read()
            temp_file.write(content)
            temp_file.close()
            temp_file_path = temp_file.name
            
        elif url:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ URL
            temp_file_path = await download_file_from_url(url)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑ –∞–±–æ –±–µ–∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—ó
        logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É: model_size={model_size}, language={language}, use_diarization={use_diarization}")
        start_time = time.time()
        
        try:
            if use_diarization:
                logger.info(f"–ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é —Ñ–∞–π–ª—É: {temp_file_path}")
                processed_result = transcription_service.transcribe_with_diarization(temp_file_path, language, model_size)
            else:
                logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Å—Ç–æ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó —Ñ–∞–π–ª—É: {temp_file_path}")
                processed_result = transcription_service.transcribe_simple(temp_file_path, language, model_size)
            
            # –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            processing_time = time.time() - start_time
            api_key_manager.log_api_usage(api_key, success=True, processing_time=processing_time)
            
        except Exception as e:
            # –õ–æ–≥—É—î–º–æ –Ω–µ–≤–¥–∞–ª–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            processing_time = time.time() - start_time
            api_key_manager.log_api_usage(api_key, success=False, processing_time=processing_time)
            raise e
        
        logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        return TranscriptionResponse(**processed_result)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    
    finally:
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
                logger.info(f"–¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {temp_file_path}")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {e}")

@app.post("/transcribe-with-diarization", response_model=TranscriptionResponse)
async def transcribe_with_diarization(
    file: Optional[UploadFile] = File(None),
    url: Optional[str] = Form(None),
    language: str = Form("uk"),
    model_size: str = Form("small"),
    api_key: str = Depends(verify_api_key)
):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ —Ñ–∞–π–ª—É –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é –û–ø–µ—Ä–∞—Ç–æ—Ä/–ö–ª—ñ—î–Ω—Ç
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - file: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —Ñ–∞–π–ª (–∞—É–¥—ñ–æ –∞–±–æ –≤—ñ–¥–µ–æ)
    - url: URL –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–∞–π–ª
    - language: –ú–æ–≤–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'uk' –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó)
    - model_size: –†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ Whisper (tiny, base, small, medium, large, auto)
    """
    
    if not file and not url:
        raise HTTPException(status_code=400, detail="–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ –∞–±–æ —Ñ–∞–π–ª, –∞–±–æ URL")
    
    if file and url:
        raise HTTPException(status_code=400, detail="–ù–∞–¥–∞–π—Ç–µ –∞–±–æ —Ñ–∞–π–ª, –∞–±–æ URL, –∞–ª–µ –Ω–µ –æ–±–∏–¥–≤–∞")
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—É –º–æ–¥–µ–ª—ñ
    if model_size not in ["tiny", "base", "small", "medium", "large", "auto"]:
        raise HTTPException(status_code=400, detail="–†–æ–∑–º—ñ—Ä –º–æ–¥–µ–ª—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏: tiny, base, small, medium, large –∞–±–æ auto")
    
    temp_file_path = None
    
    try:
        # –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É –∞–±–æ URL
        if file:
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=f".{file.filename.split('.')[-1]}")
            content = await file.read()
            temp_file.write(content)
            temp_file.close()
            temp_file_path = temp_file.name
            
        elif url:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ URL
            temp_file_path = await download_file_from_url(url)
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é
        logger.info(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É: model_size={model_size}, language={language}")
        logger.info(f"–ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é —Ñ–∞–π–ª—É: {temp_file_path}")
        start_time = time.time()
        
        try:
            processed_result = transcription_service.transcribe_with_diarization(temp_file_path, language, model_size)
            
            # –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            processing_time = time.time() - start_time
            api_key_manager.log_api_usage(api_key, success=True, processing_time=processing_time)
            
            logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—î—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            return TranscriptionResponse(**processed_result)
            
        except Exception as e:
            # –õ–æ–≥—É—î–º–æ –Ω–µ–≤–¥–∞–ª–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            processing_time = time.time() - start_time
            api_key_manager.log_api_usage(api_key, success=False, processing_time=processing_time)
            raise e
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
    
    finally:
        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
                logger.info(f"–¢–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {temp_file_path}")
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {e}")

@app.get("/health")
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—É"""
    return {
        "status": "healthy",
        "models_loaded": transcription_service is not None and transcription_service.models_loaded,
        "whisper_loaded": transcription_service is not None and transcription_service.whisper_model.model is not None
    }


# –ê–¥–º—ñ–Ω endpoints
@app.post("/admin/generate-key", response_model=GenerateKeyResponse)
async def generate_api_key(
    request: GenerateKeyRequest,
    master_token: str = Depends(verify_master_token)
):
    """–ì–µ–Ω–µ—Ä—É—î –Ω–æ–≤–∏–π API –∫–ª—é—á (–ø–æ—Ç—Ä–µ–±—É—î master —Ç–æ–∫–µ–Ω)"""
    try:
        api_key = api_key_manager.generate_api_key(request.client_name)
        key_info = api_key_manager.get_api_key_info(api_key)
        
        return GenerateKeyResponse(
            api_key=api_key,
            client_name=key_info["client_name"],
            created_at=key_info["created_at"]
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó API –∫–ª—é—á–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª—é—á–∞: {str(e)}")

@app.post("/admin/delete-key")
async def delete_api_key(
    request: DeleteKeyRequest,
    master_token: str = Depends(verify_master_token)
):
    """–í–∏–¥–∞–ª—è—î API –∫–ª—é—á (–ø–æ—Ç—Ä–µ–±—É—î master —Ç–æ–∫–µ–Ω)"""
    try:
        success = api_key_manager.delete_api_key(request.api_key)
        if success:
            return {"message": "API –∫–ª—é—á —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ"}
        else:
            raise HTTPException(status_code=404, detail="API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è API –∫–ª—é—á–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—é—á–∞: {str(e)}")

@app.get("/admin/list-keys")
async def list_api_keys(master_token: str = Depends(verify_master_token)):
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö API –∫–ª—é—á—ñ–≤ (–ø–æ—Ç—Ä–µ–±—É—î master —Ç–æ–∫–µ–Ω)"""
    try:
        keys = api_key_manager.list_api_keys()
        stats = api_key_manager.get_stats()
        
        return {
            "keys": keys,
            "stats": stats
        }
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–ª—é—á—ñ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É: {str(e)}")

@app.post("/admin/update-key-notes")
async def update_key_notes(
    request: UpdateKeyNotesRequest,
    master_token: str = Depends(verify_master_token)
):
    """–û–Ω–æ–≤–ª—é—î –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è API –∫–ª—é—á–∞ (–ø–æ—Ç—Ä–µ–±—É—î master —Ç–æ–∫–µ–Ω)"""
    try:
        success = api_key_manager.update_api_key_notes(request.api_key, request.notes)
        if success:
            return {"message": "–ù–æ—Ç–∞—Ç–∫–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ"}
        else:
            raise HTTPException(status_code=404, detail="API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ—Ç–∞—Ç–æ–∫: {str(e)}")

@app.post("/admin/toggle-key-status")
async def toggle_key_status(
    request: ToggleKeyStatusRequest,
    master_token: str = Depends(verify_master_token)
):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞ (–ø–æ—Ç—Ä–µ–±—É—î master —Ç–æ–∫–µ–Ω)"""
    try:
        success = api_key_manager.toggle_api_key_status(request.api_key)
        if success:
            key_info = api_key_manager.get_api_key_info(request.api_key)
            status = "–∞–∫—Ç–∏–≤–Ω–∏–π" if key_info.get("active", True) else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            return {"message": f"API –∫–ª—é—á —Ç–µ–ø–µ—Ä {status}"}
        else:
            raise HTTPException(status_code=404, detail="API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∫–ª—é—á–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É: {str(e)}")

@app.get("/admin/key-details/{api_key}")
async def get_key_details(
    api_key: str,
    master_token: str = Depends(verify_master_token)
):
    """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API –∫–ª—é—á (–ø–æ—Ç—Ä–µ–±—É—î master —Ç–æ–∫–µ–Ω)"""
    try:
        key_info = api_key_manager.get_api_key_info(api_key)
        if key_info:
            return {
                "key": api_key,
                "client_name": key_info["client_name"],
                "created_at": key_info["created_at"],
                "active": key_info.get("active", True),
                "usage_count": key_info.get("usage_count", 0),
                "last_used": key_info.get("last_used"),
                "total_requests": key_info.get("total_requests", 0),
                "successful_requests": key_info.get("successful_requests", 0),
                "failed_requests": key_info.get("failed_requests", 0),
                "total_processing_time": round(key_info.get("total_processing_time", 0), 2),
                "average_processing_time": round(key_info.get("total_processing_time", 0) / max(key_info.get("total_requests", 1), 1), 2),
                "notes": key_info.get("notes", "")
            }
        else:
            raise HTTPException(status_code=404, detail="API –∫–ª—é—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∫–ª—é—á–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π: {str(e)}")

@app.get("/admin", response_class=HTMLResponse)
async def admin_panel(request: Request):
    """–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è API –∫–ª—é—á–∞–º–∏"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ master —Ç–æ–∫–µ–Ω –∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    master_token = request.query_params.get("master_token")
    if not master_token or not api_key_manager.verify_master_token(master_token):
        return HTMLResponse("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>API Admin Panel - Access Denied</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 50px; text-align: center; }
                .error { color: #d32f2f; background: #ffebee; padding: 20px; border-radius: 8px; }
            </style>
        </head>
        <body>
            <div class="error">
                <h1>üîí Access Denied</h1>
                <p>–ù–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π master —Ç–æ–∫–µ–Ω</p>
                <p>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: <code>/admin?master_token=YOUR_MASTER_TOKEN</code></p>
            </div>
        </body>
        </html>
        """, status_code=401)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á—ñ–≤
    try:
        keys = api_key_manager.list_api_keys()
        stats = api_key_manager.get_stats()
    except Exception as e:
        keys = []
        stats = {"total_keys": 0, "active_keys": 0, "inactive_keys": 0}
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ HTML
    keys_html = ""
    for key in keys:
        status_class = "active" if key["active"] else "inactive"
        keys_html += f"""
        <tr class="{status_class}">
            <td><code>{key["key"][:20]}...</code></td>
            <td>{key["client_name"]}</td>
            <td>{key["created_at"][:19]}</td>
            <td>
                <button onclick="deleteKey('{key["key"]}')" class="delete-btn">–í–∏–¥–∞–ª–∏—Ç–∏</button>
            </td>
        </tr>
        """
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>API Admin Panel</title>
        <meta charset="UTF-8">
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }}
            .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
            h1 {{ color: #1976d2; border-bottom: 2px solid #1976d2; padding-bottom: 10px; }}
            .stats {{ display: flex; gap: 20px; margin: 20px 0; }}
            .stat-card {{ background: #e3f2fd; padding: 15px; border-radius: 8px; text-align: center; flex: 1; }}
            .stat-number {{ font-size: 24px; font-weight: bold; color: #1976d2; }}
            .form-section {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }}
            table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
            th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
            th {{ background: #f8f9fa; font-weight: bold; }}
            .active {{ background: #e8f5e8; }}
            .inactive {{ background: #ffe8e8; }}
            input[type="text"] {{ width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }}
            button {{ padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; }}
            .generate-btn {{ background: #4caf50; color: white; }}
            .delete-btn {{ background: #f44336; color: white; }}
            .generate-btn:hover {{ background: #45a049; }}
            .delete-btn:hover {{ background: #da190b; }}
            .new-key {{ background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 10px 0; display: none; }}
            .new-key code {{ background: #f0f0f0; padding: 5px; border-radius: 3px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üîë API Admin Panel</h1>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">{stats["total_keys"]}</div>
                    <div>–í—Å—å–æ–≥–æ –∫–ª—é—á—ñ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats["active_keys"]}</div>
                    <div>–ê–∫—Ç–∏–≤–Ω–∏—Ö</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{stats["inactive_keys"]}</div>
                    <div>–ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö</div>
                </div>
            </div>
            
            <div class="form-section">
                <h3>‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π API –∫–ª—é—á</h3>
                <input type="text" id="clientName" placeholder="–ù–∞–∑–≤–∞ –∫–ª—ñ—î–Ω—Ç–∞" />
                <button class="generate-btn" onclick="generateKey()">–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–ª—é—á</button>
                <div id="newKey" class="new-key"></div>
            </div>
            
            <div class="form-section">
                <h3>üìã –°–ø–∏—Å–æ–∫ API –∫–ª—é—á—ñ–≤</h3>
                <table>
                    <thead>
                        <tr>
                            <th>API –ö–ª—é—á</th>
                            <th>–ö–ª—ñ—î–Ω—Ç</th>
                            <th>–°—Ç–≤–æ—Ä–µ–Ω–æ</th>
                            <th>–î—ñ—ó</th>
                        </tr>
                    </thead>
                    <tbody>
                        {keys_html}
                    </tbody>
                </table>
            </div>
        </div>
        
        <script>
            async function generateKey() {{
                const clientName = document.getElementById('clientName').value;
                if (!clientName) {{
                    alert('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–ª—ñ—î–Ω—Ç–∞');
                    return;
                }}
                
                try {{
                    const response = await fetch('/admin/generate-key', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer {master_token}'
                        }},
                        body: JSON.stringify({{ client_name: clientName }})
                    }});
                    
                    if (response.ok) {{
                        const data = await response.json();
                        const newKeyDiv = document.getElementById('newKey');
                        newKeyDiv.innerHTML = `
                            <h4>‚úÖ –ù–æ–≤–∏–π API –∫–ª—é—á —Å—Ç–≤–æ—Ä–µ–Ω–æ!</h4>
                            <p><strong>–ö–ª—ñ—î–Ω—Ç:</strong> ${{data.client_name}}</p>
                            <p><strong>API –∫–ª—é—á:</strong> <code>${{data.api_key}}</code></p>
                            <p><strong>–°—Ç–≤–æ—Ä–µ–Ω–æ:</strong> ${{data.created_at}}</p>
                            <p style="color: #d32f2f;"><strong>‚ö†Ô∏è –ó–±–µ—Ä–µ–∂—ñ—Ç—å —Ü–µ–π –∫–ª—é—á! –í—ñ–Ω –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π.</strong></p>
                        `;
                        newKeyDiv.style.display = 'block';
                        document.getElementById('clientName').value = '';
                        setTimeout(() => location.reload(), 2000);
                    }} else {{
                        alert('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—é—á–∞');
                    }}
                }} catch (error) {{
                    alert('–ü–æ–º–∏–ª–∫–∞: ' + error.message);
                }}
            }}
            
            async function deleteKey(apiKey) {{
                if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π API –∫–ª—é—á?')) {{
                    return;
                }}
                
                try {{
                    const response = await fetch('/admin/delete-key', {{
                        method: 'POST',
                        headers: {{
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer {master_token}'
                        }},
                        body: JSON.stringify({{ api_key: apiKey }})
                    }});
                    
                    if (response.ok) {{
                        alert('API –∫–ª—é—á –≤–∏–¥–∞–ª–µ–Ω–æ');
                        location.reload();
                    }} else {{
                        alert('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—é—á–∞');
                    }}
                }} catch (error) {{
                    alert('–ü–æ–º–∏–ª–∫–∞: ' + error.message);
                }}
            }}
        </script>
    </body>
    </html>
    """
    
    return HTMLResponse(html_content)

@app.get("/admin-panel")
async def admin_panel_static():
    """–û–±'—î–¥–Ω–∞–Ω–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏"""
    return FileResponse("static/admin.html")

@app.get("/transcription")
async def transcription_page():
    """–í–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ"""
    return FileResponse("static/transcription.html")

@app.get("/api")
async def api_info():
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API"""
    return {
        "message": "Ukrainian Audio Transcription API (Local Models)",
        "version": "1.0.0",
        "description": "API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º –¥–∏–∫—Ç–æ—Ä—ñ–≤ (–ª–æ–∫–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ)",
        "endpoints": {
            "transcribe": "/transcribe (POST, requires API key)",
            "transcribe_with_diarization": "/transcribe-with-diarization (POST, requires API key)",
            "health": "/health (GET, public)",
            "docs": "/docs (GET, public)",
            "api_info": "/api (GET, public)",
            "admin": "/admin (GET, requires master token)",
            "admin_panel": "/admin-panel (GET, unified admin panel with advanced features)",
            "transcription": "/transcription (GET, web interface for audio/video transcription)",
            "admin_generate_key": "/admin/generate-key (POST, requires master token)",
            "admin_delete_key": "/admin/delete-key (POST, requires master token)",
            "admin_list_keys": "/admin/list-keys (GET, requires master token)",
            "admin_update_notes": "/admin/update-key-notes (POST, requires master token)",
            "admin_toggle_status": "/admin/toggle-key-status (POST, requires master token)",
            "admin_key_details": "/admin/key-details/{api_key} (GET, requires master token)"
        },
        "features": [
            "–õ–æ–∫–∞–ª—å–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è (faster-whisper)",
            "Quantized –º–æ–¥–µ–ª—ñ –¥–ª—è CPU",
            "–ü—Ä–æ—Å—Ç–∞ –¥—ñ–∞—Ä–∏–∑–∞—Ü—ñ—è –û–ø–µ—Ä–∞—Ç–æ—Ä/–ö–ª—ñ—î–Ω—Ç (WebRTC VAD)",
            "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ–∞–π–ª—ñ–≤ —Ç–∞ URL",
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞",
            "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è CPU —Ç–∞ GPU",
            "–°–∏—Å—Ç–µ–º–∞ API —Ç–æ–∫–µ–Ω—ñ–≤"
        ],
        "supported_formats": [
            "–ê—É–¥—ñ–æ: WAV, MP3, M4A, FLAC, OGG",
            "–í—ñ–¥–µ–æ: MP4, AVI, MOV, MKV"
        ],
        "model_sizes": ["tiny", "base", "small", "medium", "large", "auto"],
        "languages": ["uk", "en", "ru", "pl", "de", "fr", "es", "it"],
        "note": "–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è API –ø–æ—Ç—Ä—ñ–±–µ–Ω API –∫–ª—é—á. –û—Ç—Ä–∏–º–∞–π—Ç–µ –π–æ–≥–æ —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

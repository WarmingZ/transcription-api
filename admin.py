#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è –¥–ª—è Ukrainian Transcription API
"""

import os
import sys
from auth import get_api_key_manager

class AdminPanel:
    """–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤"""
    
    def __init__(self):
        self.api_manager = get_api_key_manager()
    
    def clear_screen(self):
        """–û—á–∏—â—É—î –µ–∫—Ä–∞–Ω"""
        os.system('clear' if os.name == 'posix' else 'cls')
    
    def show_header(self):
        """–ü–æ–∫–∞–∑—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("üîê –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–† API –ö–õ–Æ–ß–Ü–í")
        print("=" * 40)
        print("Ukrainian Transcription API")
        print()
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        print("üìã –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ:")
        print("1. üîë –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π API –∫–ª—é—á")
        print("2. üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–ª—é—á—ñ")
        print("3. üö´ –í—ñ–¥–∫–ª–∏–∫–∞—Ç–∏ –∫–ª—é—á")
        print("4. ‚úÖ –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫–ª—é—á")
        print("5. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è")
        print("6. üíæ –ï–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á—ñ–≤")
        print("7. ‚ùå –í–∏–π—Ç–∏")
        print()
    
    def generate_key(self):
        """–ì–µ–Ω–µ—Ä—É—î –Ω–æ–≤–∏–π API –∫–ª—é—á"""
        print("üîë –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ù–û–í–û–ì–û API –ö–õ–Æ–ß–ê")
        print("-" * 30)
        
        name = input("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–ª—é—á–∞: ").strip()
        if not name:
            print("‚ùå –ù–∞–∑–≤–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é!")
            return
        
        description = input("üìÑ –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ): ").strip()
        
        # –ü–∏—Ç–∞—î–º–æ —á–∏ —Ü–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π –∫–ª—é—á
        is_admin_input = input("üëë –¶–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π –∫–ª—é—á? (y/N): ").strip().lower()
        is_admin = is_admin_input in ['y', 'yes', '—Ç–∞–∫']
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–ª—é—á
        new_key = self.api_manager.generate_api_key(name, description, is_admin)
        
        print()
        print("‚úÖ –ù–û–í–ò–ô API –ö–õ–Æ–ß –°–¢–í–û–†–ï–ù–û!")
        print("=" * 40)
        print(f"üîë –ö–ª—é—á: {new_key}")
        print(f"üìù –ù–∞–∑–≤–∞: {name}")
        print(f"üìÑ –û–ø–∏—Å: {description}")
        print(f"üëë –¢–∏–ø: {'–ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†' if is_admin else '–ó–í–ò–ß–ê–ô–ù–ò–ô –ö–û–†–ò–°–¢–£–í–ê–ß'}")
        print()
        print("üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print(f"   curl -H 'Authorization: Bearer {new_key}' http://localhost:8000/api")
        print()
        print("‚ö†Ô∏è  –ó–ë–ï–†–ï–ñ–Ü–¢–¨ –¶–ï–ô –ö–õ–Æ–ß –í –ë–ï–ó–ü–ï–ß–ù–û–ú–£ –ú–Ü–°–¶–Ü!")
        print("   –í—ñ–Ω –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π!")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def show_keys(self):
        """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ API –∫–ª—é—á—ñ"""
        print("üìã –í–°–Ü API –ö–õ–Æ–ß–Ü")
        print("-" * 30)
        
        keys = self.api_manager.list_api_keys_with_keys()
        
        if not keys:
            print("‚ùå API –∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        for i, key_info in enumerate(keys, 1):
            status_icon = "‚úÖ" if key_info['is_active'] else "‚ùå"
            admin_icon = "üëë" if key_info.get('is_admin', False) else "üë§"
            print(f"{i}. {status_icon} {admin_icon} {key_info['name']}")
            print(f"   üîë –ö–ª—é—á: {key_info['api_key']}")
            print(f"   üìÑ –û–ø–∏—Å: {key_info['description']}")
            print(f"   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {key_info['created_at']}")
            print(f"   üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å: {key_info['usage_count']}")
            print(f"   üëë –¢–∏–ø: {'–ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†' if key_info.get('is_admin', False) else '–ó–í–ò–ß–ê–ô–ù–ò–ô –ö–û–†–ò–°–¢–£–í–ê–ß'}")
            if key_info['last_used']:
                print(f"   üïí –û—Å—Ç–∞–Ω–Ω—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {key_info['last_used']}")
            print()
        
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def revoke_key(self):
        """–í—ñ–¥–∫–ª–∏–∫–∞—î API –∫–ª—é—á"""
        print("üö´ –í–Ü–î–ö–õ–ò–ö–ê–ù–ù–Ø API –ö–õ–Æ–ß–ê")
        print("-" * 30)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∫–ª—é—á—ñ
        keys = self.api_manager.list_api_keys_with_keys()
        active_keys = [k for k in keys if k['is_active']]
        
        if not active_keys:
            print("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—é—á—ñ–≤ –¥–ª—è –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è")
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print("–ê–∫—Ç–∏–≤–Ω—ñ –∫–ª—é—á—ñ:")
        for i, key_info in enumerate(active_keys, 1):
            print(f"{i}. {key_info['name']} - {key_info['api_key']}")
        
        try:
            choice = int(input("\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–ª—è –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—è: ")) - 1
            if 0 <= choice < len(active_keys):
                selected_key = active_keys[choice]
                
                print(f"\n‚ö†Ô∏è  –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–∫–ª–∏–∫–∞—Ç–∏ –∫–ª—é—á '{selected_key['name']}'?")
                confirm = input("–í–≤–µ–¥—ñ—Ç—å '–¢–ê–ö' –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: ").strip()
                
                if confirm.upper() == '–¢–ê–ö':
                    if self.api_manager.revoke_api_key(selected_key['api_key']):
                        print("‚úÖ –ö–ª—é—á —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–æ!")
                    else:
                        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–Ω—ñ –∫–ª—é—á–∞")
                else:
                    print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
        except ValueError:
            print("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def activate_key(self):
        """–ê–∫—Ç–∏–≤—É—î –≤—ñ–¥–∫–ª–∏–∫–∞–Ω–∏–π –∫–ª—é—á"""
        print("‚úÖ –ê–ö–¢–ò–í–ê–¶–Ü–Ø API –ö–õ–Æ–ß–ê")
        print("-" * 30)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–ª—é—á—ñ
        keys = self.api_manager.list_api_keys_with_keys()
        inactive_keys = [k for k in keys if not k['is_active']]
        
        if not inactive_keys:
            print("‚ùå –ù–µ–º–∞—î –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—é—á—ñ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó")
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        print("–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–ª—é—á—ñ:")
        for i, key_info in enumerate(inactive_keys, 1):
            print(f"{i}. {key_info['name']} - {key_info['api_key']}")
        
        try:
            choice = int(input("\n–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: ")) - 1
            if 0 <= choice < len(inactive_keys):
                selected_key = inactive_keys[choice]
                
                # –ê–∫—Ç–∏–≤—É—î–º–æ –∫–ª—é—á
                self.api_manager.api_keys[selected_key['api_key']]['is_active'] = True
                self.api_manager.save_keys()
                
                print(f"‚úÖ –ö–ª—é—á '{selected_key['name']}' —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!")
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
        except ValueError:
            print("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def show_stats(self):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø")
        print("-" * 30)
        
        keys = self.api_manager.list_api_keys_with_keys()
        
        if not keys:
            print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
            input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
            return
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_keys = len(keys)
        active_keys = len([k for k in keys if k['is_active']])
        admin_keys = len([k for k in keys if k.get('is_admin', False)])
        user_keys = total_keys - admin_keys
        total_usage = sum(k['usage_count'] for k in keys)
        
        print(f"üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üîë –í—Å—å–æ–≥–æ –∫–ª—é—á—ñ–≤: {total_keys}")
        print(f"   üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {admin_keys}")
        print(f"   üë§ –ó–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {user_keys}")
        print(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_keys}")
        print(f"   ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {total_keys - active_keys}")
        print(f"   üîÑ –ó–∞–≥–∞–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {total_usage}")
        print()
        
        # –¢–æ–ø –∫–ª—é—á—ñ–≤ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
        sorted_keys = sorted(keys, key=lambda x: x['usage_count'], reverse=True)
        
        print("üèÜ –¢–æ–ø –∫–ª—é—á—ñ–≤ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º:")
        for i, key_info in enumerate(sorted_keys[:5], 1):
            status_icon = "‚úÖ" if key_info['is_active'] else "‚ùå"
            admin_icon = "üëë" if key_info.get('is_admin', False) else "üë§"
            print(f"   {i}. {status_icon} {admin_icon} {key_info['name']}: {key_info['usage_count']} –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def export_keys(self):
        """–ï–∫—Å–ø–æ—Ä—Ç—É—î –∫–ª—é—á—ñ –≤ —Ñ–∞–π–ª"""
        print("üíæ –ï–ö–°–ü–û–†–¢ –ö–õ–Æ–ß–Ü–í")
        print("-" * 30)
        
        filename = input("üìÅ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É (–±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è): ").strip()
        if not filename:
            filename = "api_keys_export"
        
        filename += ".txt"
        
        try:
            keys = self.api_manager.list_api_keys_with_keys()
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("API –ö–õ–Æ–ß–Ü UKRAINIAN TRANSCRIPTION API\n")
                f.write("=" * 50 + "\n\n")
                
                for key_info in keys:
                    status = "–ê–ö–¢–ò–í–ù–ò–ô" if key_info['is_active'] else "–ù–ï–ê–ö–¢–ò–í–ù–ò–ô"
                    admin_type = "–ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†" if key_info.get('is_admin', False) else "–ó–í–ò–ß–ê–ô–ù–ò–ô –ö–û–†–ò–°–¢–£–í–ê–ß"
                    f.write(f"–ù–∞–∑–≤–∞: {key_info['name']}\n")
                    f.write(f"–ö–ª—é—á: {key_info['api_key']}\n")
                    f.write(f"–û–ø–∏—Å: {key_info['description']}\n")
                    f.write(f"–¢–∏–ø: {admin_type}\n")
                    f.write(f"–°—Ç–∞—Ç—É—Å: {status}\n")
                    f.write(f"–°—Ç–≤–æ—Ä–µ–Ω–æ: {key_info['created_at']}\n")
                    f.write(f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å: {key_info['usage_count']}\n")
                    if key_info['last_used']:
                        f.write(f"–û—Å—Ç–∞–Ω–Ω—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: {key_info['last_used']}\n")
                    f.write("-" * 30 + "\n\n")
            
            print(f"‚úÖ –ö–ª—é—á—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ —Ñ–∞–π–ª: {filename}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
        
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è"""
        while True:
            self.clear_screen()
            self.show_header()
            self.show_menu()
            
            choice = input("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (1-7): ").strip()
            
            if choice == "1":
                self.clear_screen()
                self.show_header()
                self.generate_key()
            elif choice == "2":
                self.clear_screen()
                self.show_header()
                self.show_keys()
            elif choice == "3":
                self.clear_screen()
                self.show_header()
                self.revoke_key()
            elif choice == "4":
                self.clear_screen()
                self.show_header()
                self.activate_key()
            elif choice == "5":
                self.clear_screen()
                self.show_header()
                self.show_stats()
            elif choice == "6":
                self.clear_screen()
                self.show_header()
                self.export_keys()
            elif choice == "7":
                print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        admin = AdminPanel()
        admin.run()
    except KeyboardInterrupt:
        print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
